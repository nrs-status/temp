% nix, shintu

# determine what is making a store path depend on another; figure out specific dependencies between store paths
nix why-depends --precise PACKAGE DEPENDENCY 

# query a store path to determine what's keeping it alive; cause
nix-store --query --roots <path>

# query a store path to determine its runtime dependencies
nix-store -q --references `which PROGRAM` or give store path explicitly

# query a store path to determine its reverse dependencies
nix-store -q --referrers `which PROGRAM` or give store path explicitly

# query a store path and list its dependencies recursively, so as to list absolutely everything necessary to use that derivation
nix-store -qR `which PROGRAM` or PATH; alternatively: nix-store -q --tree PATH

# delete specified generations from the system profile
nix-env --profile /nix/var/nix/profiles/system --delete-generations <generations>

# delete generations more than <days> days old from the sysem profile 
nix-env --profile /nix/var/nix/profiles/system --delete-generations <days>d

# list generations for the system profile
nix profile history --profile /nix/var/nix/profiles/system

# list a profile's generation (in this example: nixOS generations)
nix-env --list-generations --profile /nix/var/nix/profiles/system

# switch to a profile or create a new profile
nix-env --switch-profile <profile_path>

# run a package without keeping it alive next garbage collection
nix run nixpkgs#PACKAGE_NAME -- ARGUMENT 

# find which binaries/executables are provided by a package; 
ls "$(nix build FLAKE#PACKAGE --print-out-paths --no-link)/bin" where FLAKE can be nixpkgs

# access a previous/past/historical nixpkgs from command line; history
nix build github:nixos/nixpkgs/nixos-23.11#hello

# access a previous/past/historical nixpkgs from command line; history; history
nix build 'github:NixOS/nixpkgs?rev=336eda0d07dc5e2be1f923990ad9fdb6bc8e28e3'#haskell.packages.ghc963.haskell-language-server

# unpin flake/update flake lock file
nix flake update

# import the nixpkgs flake from the repl
:lf github:NixOS/nixpkgs

# delete store path if it is garbage collectable
nix store delete /nix/store/<rest of path>

# path to system profile
/nix/var/nix/profiles/system

# path to system generations links
/nix/var/nix/profiles

# build system without switching to it. useful to test builds when debugging, or to find what combination of builds will successfully run
nixos-rebuild build --flake <flakeref>?rev=<flake commit>

# build system without switching to it example
nixos-rebuild build --flake path:/etc/nixos\?rev=03a70d10805e1b87dd098d053186a371a8a03f5d

# switch to system configuration/build that has been built but now switched to. warning: this will not add a generation, call nix-env --profile /nix/var/nix/profiles/system --set $buildOutput for this
sudo $buildOutput/bin/switch-to-configuration

# add system configuration/build that has been built but not switched to (using command nixos-rebuild build) as a generation and t obootloader
nix-env --profile /nix/var/nix/profiles/system --set $buildOutput

# run nix-build on a file and pass it a nixpkgs
nix-build --expr 'let pkgs = import <nixpkgs> {}; in import ./pkgToBuild.nix { inherit pkgs; }'

# run nix-build on a file and pass it a nixpkgs or some arguments
nix-build pkgToBuild.nix --arg pkgs 'import <nixpkgs> {}'

# evaluate a nix expression
nix eval --expr '1 + 2'

# get the current version of the nixpkgs flake
nix eval --raw nixpkgs#lib.version

# print/get the store path of a package
nix eval --raw nixpkgs#<packageName>

# nix build where you need to pass the flake as a function input. Independently, only grab a specific attribute from target
-A attributeName --arg flakeArg 'builtins.getFlake "github:nix-community/nixvim"'

# path to the system profile
/nix/var/nix/profiles/system

# nix build without dealing with ./result links
--no-link --print-out-paths

# build a specific package from a system flake
nix build .#nixosConfigurations.<hostname>.<attr>

# allow relative paths by allowing impure mode (in this case, used to get a shell from a flake that must build a derivation containing a ~/... path)
nix develop --impure


